pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'prod'],
            description: 'Target environment for deployment'
        )
        booleanParam(
            name: 'DESTROY',
            defaultValue: false,
            description: 'Destroy infrastructure instead of creating it'
        )
    }
    
    environment {
        // Azure Service Principal credentials
        ARM_CLIENT_ID = credentials('azure-client-id')
        ARM_CLIENT_SECRET = credentials('azure-client-secret')
        ARM_TENANT_ID = credentials('azure-tenant-id')
        ARM_SUBSCRIPTION_ID = credentials('azure-subscription-id')
        
        // Terraform configuration
        TF_VAR_admin_email = credentials('admin-email')
        TF_IN_AUTOMATION = 'true'
        TF_INPUT = 'false'
        
        // Working directory
        TERRAFORM_DIR = "infra/envs/${params.ENVIRONMENT}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.BUILD_TIMESTAMP = sh(
                        script: 'date +%Y%m%d-%H%M%S',
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Terraform Format Check') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Checking Terraform formatting..."
                        terraform fmt -check=true -diff=true -recursive
                    '''
                }
            }
        }
        
        stage('TFLint') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Running TFLint..."
                        # Install tflint if not present
                        if ! command -v tflint &> /dev/null; then
                            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
                        fi
                        
                        # Initialize tflint
                        tflint --init
                        
                        # Run tflint
                        tflint --format=compact
                    '''
                }
            }
        }
        
        stage('Checkov Security Scan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Running Checkov security scan..."
                        # Install checkov if not present
                        if ! command -v checkov &> /dev/null; then
                            pip3 install checkov
                        fi
                        
                        # Run checkov scan
                        checkov -d . --framework terraform --output cli --quiet
                    '''
                }
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Initializing Terraform..."
                        terraform init -upgrade
                    '''
                }
            }
        }
        
        stage('Terraform Validate') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Validating Terraform configuration..."
                        terraform validate
                    '''
                }
            }
        }
        
        stage('Terraform Plan') {
            when {
                not { params.DESTROY }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Creating Terraform plan..."
                            terraform plan -detailed-exitcode -out=tfplan-${BUILD_TIMESTAMP}.out
                        '''
                        
                        // Archive the plan file
                        archiveArtifacts artifacts: "tfplan-${env.BUILD_TIMESTAMP}.out", fingerprint: true
                        
                        // Generate and archive plan summary
                        sh '''
                            echo "Generating plan summary..."
                            terraform show -no-color tfplan-${BUILD_TIMESTAMP}.out > tfplan-${BUILD_TIMESTAMP}.txt
                        '''
                        archiveArtifacts artifacts: "tfplan-${env.BUILD_TIMESTAMP}.txt", fingerprint: true
                    }
                }
            }
        }
        
        stage('Terraform Destroy Plan') {
            when {
                params.DESTROY
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Creating Terraform destroy plan..."
                            terraform plan -destroy -detailed-exitcode -out=tfplan-destroy-${BUILD_TIMESTAMP}.out
                        '''
                        
                        // Archive the destroy plan file
                        archiveArtifacts artifacts: "tfplan-destroy-${env.BUILD_TIMESTAMP}.out", fingerprint: true
                        
                        // Generate and archive destroy plan summary
                        sh '''
                            echo "Generating destroy plan summary..."
                            terraform show -no-color tfplan-destroy-${BUILD_TIMESTAMP}.out > tfplan-destroy-${BUILD_TIMESTAMP}.txt
                        '''
                        archiveArtifacts artifacts: "tfplan-destroy-${env.BUILD_TIMESTAMP}.txt", fingerprint: true
                    }
                }
            }
        }
        
        stage('Manual Approval') {
            steps {
                script {
                    def action = params.DESTROY ? 'DESTROY' : 'APPLY'
                    def planFile = params.DESTROY ? "tfplan-destroy-${env.BUILD_TIMESTAMP}.txt" : "tfplan-${env.BUILD_TIMESTAMP}.txt"
                    
                    // Display plan summary for review
                    def planSummary = readFile("${TERRAFORM_DIR}/${planFile}")
                    
                    timeout(time: 30, unit: 'MINUTES') {
                        input message: """
                        Ready to ${action} infrastructure for ${params.ENVIRONMENT} environment?
                        
                        Plan Summary:
                        ${planSummary}
                        
                        Click 'Proceed' to continue or 'Abort' to cancel.
                        """, ok: 'Proceed'
                    }
                }
            }
        }
        
        stage('Terraform Apply') {
            when {
                not { params.DESTROY }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Applying Terraform plan..."
                        terraform apply -auto-approve tfplan-${BUILD_TIMESTAMP}.out
                        
                        echo "Terraform apply completed successfully!"
                        echo "Generating outputs..."
                        terraform output -json > terraform-outputs-${BUILD_TIMESTAMP}.json
                    '''
                    
                    // Archive outputs
                    archiveArtifacts artifacts: "terraform-outputs-${env.BUILD_TIMESTAMP}.json", fingerprint: true
                }
            }
        }
        
        stage('Terraform Destroy') {
            when {
                params.DESTROY
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        echo "Destroying infrastructure..."
                        terraform apply -auto-approve tfplan-destroy-${BUILD_TIMESTAMP}.out
                        
                        echo "Terraform destroy completed successfully!"
                    '''
                }
            }
        }
        
        stage('Post-Deploy Validation') {
            when {
                not { params.DESTROY }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        sh '''
                            echo "Running post-deployment validation..."
                            
                            # Extract container app URL from outputs
                            CONTAINER_APP_URL=$(terraform output -raw container_app_url 2>/dev/null || echo "")
                            
                            if [ -n "$CONTAINER_APP_URL" ]; then
                                echo "Container App URL: $CONTAINER_APP_URL"
                                
                                # Wait for container app to be ready
                                echo "Waiting for container app to be ready..."
                                sleep 60
                                
                                # Test health endpoint
                                echo "Testing health endpoint..."
                                for i in {1..5}; do
                                    if curl -f -s "${CONTAINER_APP_URL}/health" > /dev/null; then
                                        echo "Health check passed!"
                                        break
                                    else
                                        echo "Health check attempt $i failed, retrying in 30 seconds..."
                                        sleep 30
                                    fi
                                done
                            else
                                echo "Container App URL not found in outputs"
                            fi
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up plan files
            dir("${TERRAFORM_DIR}") {
                sh '''
                    echo "Cleaning up temporary files..."
                    rm -f tfplan-*.out
                '''
            }
        }
        
        success {
            script {
                def action = params.DESTROY ? 'destroyed' : 'deployed'
                def message = """
                ✅ Infrastructure ${action} successfully for ${params.ENVIRONMENT} environment!
                
                Build: ${env.BUILD_NUMBER}
                Environment: ${params.ENVIRONMENT}
                Action: ${action.toUpperCase()}
                Duration: ${currentBuild.durationString}
                """
                
                echo message
                
                // Send notification (configure based on your notification system)
                // emailext (
                //     subject: "Infrastructure ${action} - ${params.ENVIRONMENT}",
                //     body: message,
                //     to: "${env.TF_VAR_admin_email}"
                // )
            }
        }
        
        failure {
            script {
                def action = params.DESTROY ? 'destruction' : 'deployment'
                def message = """
                ❌ Infrastructure ${action} failed for ${params.ENVIRONMENT} environment!
                
                Build: ${env.BUILD_NUMBER}
                Environment: ${params.ENVIRONMENT}
                Action: ${action.toUpperCase()}
                Duration: ${currentBuild.durationString}
                
                Please check the build logs for details.
                """
                
                echo message
                
                // Send failure notification
                // emailext (
                //     subject: "Infrastructure ${action} FAILED - ${params.ENVIRONMENT}",
                //     body: message,
                //     to: "${env.TF_VAR_admin_email}"
                // )
            }
        }
    }
}